<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>证件号码15位与18位相互转化</title>
    <link href="/2022/01/12/%E8%AF%81%E4%BB%B6%E5%8F%B7%E7%A0%8115%E4%BD%8D%E4%B8%8E18%E4%BD%8D%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/"/>
    <url>/2022/01/12/%E8%AF%81%E4%BB%B6%E5%8F%B7%E7%A0%8115%E4%BD%8D%E4%B8%8E18%E4%BD%8D%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="校验码计算方法说明："><a href="#校验码计算方法说明：" class="headerlink" title="校验码计算方法说明："></a>校验码计算方法说明：</h3><p>1、将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为： 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 ；</p><p>2、将这17位数字和系数相乘的结果相加；</p><p>3、用加出来和除以11，看余数是多少；</p><p>4、余数只可能有0 1 2 3 4 5 6 7 8 9 10这11个数字。其分别对应的最后一位身份证的号码为 1 0 X 9 8 7 6 5 4 3 2 ；</p><p>5、通过上面得知如果余数是2，就会在身份证的第18位数字上出现罗马数字的X。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfirm_cardId</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算校验码（处理证件号码最后一位数据）</span><br><span class="hljs-string">    :param id: 证件号码</span><br><span class="hljs-string">    :return: 校验码</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    WI = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, ]<br>    VI = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, ]<br>    AI = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>) == <span class="hljs-number">18</span>:<br>        <span class="hljs-built_in">id</span> = <span class="hljs-built_in">id</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>) == <span class="hljs-number">17</span>:<br>        S = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">id</span>:<br>            AI.append(<span class="hljs-built_in">int</span>(i))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>            S = S + WI[i] * AI[i]<br>        remain = S % <span class="hljs-number">11</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;X&#x27;</span> <span class="hljs-keyword">if</span> remain == <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">str</span>(VI[remain])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">up_to_eighteen</span>(<span class="hljs-params">card_id</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    15位转18位</span><br><span class="hljs-string">    :param card_id: (字符串格式)</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    eighteen_card_id = <span class="hljs-built_in">str</span>(card_id[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]) + <span class="hljs-string">&#x27;19&#x27;</span> + <span class="hljs-built_in">str</span>(card_id[<span class="hljs-number">6</span>:<span class="hljs-number">15</span>])<br>    <span class="hljs-keyword">return</span> eighteen_card_id + transfirm_cardId(eighteen_card_id)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">down_to_fifteen</span>(<span class="hljs-params">card_id</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    18位转15位</span><br><span class="hljs-string">    :param card_id:(字符串格式)</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> card_id[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] + card_id[<span class="hljs-number">8</span>:<span class="hljs-number">17</span>]<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(up_to_eighteen(<span class="hljs-string">&quot;441700680129516&quot;</span>))<br>    <span class="hljs-built_in">print</span>(down_to_fifteen(<span class="hljs-string">&quot;44170019680129516X&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>身份证校验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github配置记录</title>
    <link href="/2022/01/12/github%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/01/12/github%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="1-生成ssh-key"><a href="#1-生成ssh-key" class="headerlink" title="1. 生成ssh key"></a>1. 生成ssh key</h4><p><code>ssh-keygen -t rsa -C &quot;19***47@qq.com&quot;</code></p><h4 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h4><p><code>chmod 600 github(private key)</code></p><h4 id="3-身份添加-以下为自己的目录"><a href="#3-身份添加-以下为自己的目录" class="headerlink" title="3. 身份添加(以下为自己的目录)"></a>3. 身份添加(以下为自己的目录)</h4><p><code>ssh-add /Users/yourname.github.io/github</code></p><h5 id="3-1-成功提示"><a href="#3-1-成功提示" class="headerlink" title="3.1 成功提示"></a>3.1 成功提示</h5><p>Identity added: /Users/yourname.github.io/github (19***<a href="mailto:&#x34;&#x37;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x34;&#x37;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;</a>)</p><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h4><p><code>ssh -T git@github.com</code></p><h5 id="4-1-成功结果"><a href="#4-1-成功结果" class="headerlink" title="4.1 成功结果"></a>4.1 成功结果</h5><p>Hi ***! You’ve successfully authenticated, but GitHub does not provide shell access.</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>ssh key</tag>
      
      <tag>mac git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git报错权限问题说明</title>
    <link href="/2021/12/10/git%E6%8A%A5%E9%94%99%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/"/>
    <url>/2021/12/10/git%E6%8A%A5%E9%94%99%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="git报错没有权限解决方案介绍："><a href="#git报错没有权限解决方案介绍：" class="headerlink" title="git报错没有权限解决方案介绍："></a>git报错没有权限解决方案介绍：</h3><h4 id="1、报错提示说明："><a href="#1、报错提示说明：" class="headerlink" title="1、报错提示说明："></a>1、报错提示说明：</h4><p>could not lock config file C:/Windows/System32/config/systemprofile<br><img src="/git/Image1.png" alt="报错截图"></p><h4 id="2、问题原因："><a href="#2、问题原因：" class="headerlink" title="2、问题原因："></a>2、问题原因：</h4><p>系统文件夹没有权限导致，在环境变量–系统变量中找到“HOME”,查看变量值，默认可能是“%USERPROFILE%”，如下图所示<br><img src="/git/Image2.png"></p><h4 id="3、解决方案："><a href="#3、解决方案：" class="headerlink" title="3、解决方案："></a>3、解决方案：</h4><p>（1）修改‘HOME’的变量值为系统根目录，如“C:\Users\Dell”</p><p><img src="/git/Image3.png"></p><p>（2）使用管理员权限打开git报错中的文件地址，即下图中的地址：</p><p><img src="/git/Image4.png"></p><p>（3）打开.gitconfig文件，在文件中添加用户信息，包括email和name信息</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br>    <span class="hljs-attr">email</span> = <span class="hljs-number">15689452369</span>@<span class="hljs-number">163</span>.com<br>    <span class="hljs-attr">name</span> = test<br></code></pre></td></tr></table></figure><p><img src="/git/Image5.png"></p>]]></content>
    
    
    <categories>
      
      <category>git报错权限问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git、权限</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python+request做接口自动化</title>
    <link href="/2021/12/09/python-request%E5%81%9A%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <url>/2021/12/09/python-request%E5%81%9A%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="python-request做接口自动化"><a href="#python-request做接口自动化" class="headerlink" title="python+request做接口自动化"></a>python+request做接口自动化</h4><ol><li>导入包（requests，json）</li><li>有变量保存请求的url和参数(post请求)</li></ol><p><img src="/python/Image.png" alt="示例"></p><ol start="3"><li>将参数信息转化为json格式<br> <code>payload = json.dumps(payload)</code></li><li>添加请求头信息<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 1c">headers = &#123;<br>&#x27;Connection&#x27;: &#x27;keep-alive&#x27;,<br> &#x27;Accept&#x27;: &#x27;application/json, text/plain, */*&#x27;,<br>&#x27;Origin&#x27;: &#x27;http://58.49.35.2:<span class="hljs-number">9100</span>&#x27;,<br>&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.<span class="hljs-number">3945.88</span> Safari/537.36&#x27;,<br>&#x27;Content-Type&#x27;: &#x27;application/json;charset=UTF-8&#x27;,<br>&#x27;Referer&#x27;: &#x27;http://58.49.35.2:<span class="hljs-number">9100</span>/&#x27;,<br>&#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,<br>&#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;,<br>&#x27;cookie&#x27;: &#x27;JSESSIONID=4c<span class="hljs-number">4674</span>1e-b917-41df-a802-84b1dfd<span class="hljs-number">2246</span>6; Admin-Token=hsfj&#x27;,<br><span class="hljs-meta"># &#x27;Content-Type&#x27;: &#x27;text/plain&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>发送请求并申明一个变量进行接收返回信息<br> <code>response = requests.request(&quot;POST&quot;, url, headers=headers, data = payload)</code></li><li>使用json（）方法将返回信息转化为json格式并打印 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">json_date = response<span class="hljs-selector-class">.json</span>() #获取返回信息<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(json_date)</span></span><br></code></pre></td></tr></table></figure></li><li>获取返回信息中的某一个参数的值的写法<br><code>data = json_date[&#39;data&#39;][&#39;list&#39;][0][&#39;name&#39;]</code></li></ol><p><img src="/python/Image1.png" alt="返回信息示例"></p><p><font color="#c3c3c3">补充：Python+unittest+request+excel框架做接口自动化</font></p><p><img src="/python/Image2.png" alt="目录说明"></p><p><img src="/python/Image3.png" alt="项目目录结构"></p><h3 id="在python中使用requirements做包的依赖说明"><a href="#在python中使用requirements做包的依赖说明" class="headerlink" title="在python中使用requirements做包的依赖说明"></a><font color="#c3c3c3">在python中使用requirements做包的依赖说明</font></h3><ol><li>首选安装requirements插件</li><li>在Terminal 窗口执行命令： <code>pip freeze&gt;requirements.txt</code></li></ol><h3 id="在pycharm中程序能正常运行，但是在dos窗口不能正常运行的解决办法："><a href="#在pycharm中程序能正常运行，但是在dos窗口不能正常运行的解决办法：" class="headerlink" title="在pycharm中程序能正常运行，但是在dos窗口不能正常运行的解决办法："></a><font color="#c3c3c3">在pycharm中程序能正常运行，但是在dos窗口不能正常运行的解决办法：</font></h3><p>在主程序中的开头加入以下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import sys<br>import os<br>curPath = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.abspath</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(__file__))<br>rootPath = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.split</span>(curPath)<span class="hljs-selector-attr">[0]</span><br>sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.append</span>(rootPath)<br></code></pre></td></tr></table></figure><p><img src="/python/Image4.png" alt="示例"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python, 自动化, 测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postman</title>
    <link href="/2021/12/09/postman/"/>
    <url>/2021/12/09/postman/</url>
    
    <content type="html"><![CDATA[<h3 id="postman常见使用"><a href="#postman常见使用" class="headerlink" title="postman常见使用"></a>postman常见使用</h3><h4 id="1、断言："><a href="#1、断言：" class="headerlink" title="1、断言："></a>1、断言：</h4><p> 常用断言：<br>（1）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm.test(<span class="hljs-string">&quot;内容msg为成功&quot;</span>, <span class="hljs-keyword">function</span> () &#123;<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;内容msg为成功&#x27;</span>代表可根据具体的接口情况进行变换<br>    pm.expect(pm.response.text()).to.include(<span class="hljs-string">&quot;成功&quot;</span>);<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;成功&#x27;</span>代表可根据具体的接口情况进行变换<br>&#125;);   <span class="hljs-regexp">//</span> 说明：响应的内容中包括“成功”<br></code></pre></td></tr></table></figure><p>（2）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm.test(<span class="hljs-string">&quot;验证msg为成功&quot;</span>, <span class="hljs-keyword">function</span> () &#123;<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;验证msg为成功&#x27;</span>代表可根据具体的接口情况进行变换<br>    var jsonData = pm.response.json();<br>    pm.expect(jsonData.msg).to.eql(<span class="hljs-string">&quot;成功&quot;</span>);  <span class="hljs-regexp">//</span><span class="hljs-string">&#x27;msg、成功&#x27;</span>代表可根据具体的接口情况进行变换<br>&#125;); <span class="hljs-regexp">//</span>说明：响应的结果中验证“msg”的值是否为“成功”<br></code></pre></td></tr></table></figure><p><img src="/postman/Image.png" alt="示例图片"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">pm.test(<span class="hljs-string">&quot;验证列表中的第一个人是否是范卓&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> jsonData = pm.response.json();<br>    pm.expect(jsonData.data.list[<span class="hljs-number">0</span>].name).to.eql(<span class="hljs-string">&quot;范卓&quot;</span>);<br>&#125;);    <span class="hljs-comment">//说明：响应的结果中验证“msg”的值是否为“成功”</span><br></code></pre></td></tr></table></figure><p>（3）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm.test(<span class="hljs-string">&quot;Response time is less than 200ms&quot;</span>, <span class="hljs-keyword">function</span> () &#123;<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;Response time is less than 200ms&#x27;</span>代表可根据具体的接口情况进行变换<br>    pm.expect(pm.response.responseTime).to.be.below(<span class="hljs-number">200</span>);<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;200&#x27;</span>代表可根据具体的接口情况进行变换<br>&#125;);   <span class="hljs-regexp">//</span>说明：检验响应时间是都超过<span class="hljs-number">200</span>ms<br></code></pre></td></tr></table></figure><p>（4）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">pm.test(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-keyword">function</span> () &#123;<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;Status code is 200&#x27;</span>代表可根据具体的接口情况进行变换<br>    pm.response.to.have.status(<span class="hljs-number">200</span>);<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;200&#x27;</span>代表可根据具体的接口情况进行变换<br>&#125;);     <span class="hljs-regexp">//</span>说明：验证响应状态码是否为<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h4 id="2、在test中设置环境变量："><a href="#2、在test中设置环境变量：" class="headerlink" title="2、在test中设置环境变量："></a>2、在test中设置环境变量：</h4><p>常用情景：将A接口中的响应结果值用在B的请求参数中，在A接口中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取返回的JSON信息<br>res = JSON.parse(responseBody)<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;res&#x27;</span>代表可根据具体的接口情况进行变换<br><span class="hljs-regexp">//</span>将接口搜索人员信息中返回的人员的id的值设置为环境变量，变量名为person_id，在B接口中引用该变量<br>pm.environment.set(<span class="hljs-string">&quot;person_id&quot;</span>,res.data.list[<span class="hljs-number">0</span>].id);<span class="hljs-regexp">//</span><span class="hljs-string">&#x27;person_id、res.data.list[0].id&#x27;</span>代表可根据具体的接口情况进行变换<br></code></pre></td></tr></table></figure><h4 id="3、随机数："><a href="#3、随机数：" class="headerlink" title="3、随机数："></a>3、随机数：</h4><p>说明：在pre-request-script中添加，然后在请求体中直接引用变量<br>（1）postman自带随机数：五种<br>    *  添加一个当前的时间戳<br>    *  添加一个时分秒的时间戳<br>    *  添加一个v4风格的guid<br>    *  添加一个 0–1000的随机整数<br>    *  添加一个0–1000的随机浮点数</p><p><img src="/postman/Image1.png" alt="示例图片"></p><p>（2）随机生成姓名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> familyNames = <span class="hljs-string">&quot;赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮卞齐康伍余元卜顾孟平黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董梁杜阮蓝闵席季麻强贾路娄危江童颜郭梅盛林刁钟徐邱骆高夏蔡田樊胡凌霍虞万支柯昝管卢莫经房裘缪干解应宗丁宣贲邓郁单杭洪包诸左石崔吉钮龚程嵇邢滑裴陆荣翁荀羊於惠甄曲家封芮羿储靳汲邴糜松井段富巫乌焦巴弓牧隗山谷车侯宓蓬全郗班仰秋仲伊宫宁仇栾暴甘钭厉戎祖武符刘景詹束龙叶幸司韶郜黎蓟薄印宿白怀蒲邰从鄂索咸籍赖卓蔺屠蒙池乔阴鬱胥能苍双闻莘党翟谭贡劳逄姬申扶堵冉宰郦雍卻璩桑桂濮牛寿通边扈燕冀郏浦尚农温别庄晏柴瞿阎充慕连茹习宦艾鱼容向古易慎戈廖庾终暨居衡步都耿满弘匡国文寇广禄阙东欧殳沃利蔚越夔隆师巩厍聂晁勾敖融冷訾辛阚那简饶空曾毋沙乜养鞠须丰巢关蒯相查后荆红游竺权逯盖益桓公万俟司马上官欧阳夏侯诸葛闻人东方赫连皇甫尉迟公羊澹台公冶宗政濮阳淳于单于太叔申屠公孙仲孙轩辕令狐钟离宇文长孙慕容鲜于闾丘司徒司空丌官司寇仉督子车颛孙端木巫马公西漆雕乐正壤驷公良拓跋夹谷宰父谷梁晋楚闫法汝鄢涂钦段干百里东郭南门呼延归海羊舌微生岳帅缑亢况郈有琴梁丘左丘东门西门商牟佘佴伯赏南宫墨哈谯笪年爱阳佟&quot;</span>;<br>    <span class="hljs-keyword">var</span> givenNames = <span class="hljs-string">&quot;子璇淼国栋夫子瑞堂甜敏尚国贤贺祥晨涛昊轩易轩辰益帆冉瑾春瑾昆春齐杨文昊东雄霖浩晨熙涵溶溶冰枫欣宜豪欣慧建政美欣淑慧文轩杰欣源忠林榕润欣汝慧嘉新建建林亦菲林冰洁佳欣涵涵禹辰淳美泽惠伟洋涵越润丽翔淑华晶莹凌晶苒溪雨涵嘉怡佳毅子辰佳琪紫轩瑞辰昕蕊萌明远欣宜泽远欣怡佳怡佳惠晨茜晨璐运昊汝鑫淑君晶滢润莎榕汕佳钰佳玉晓庆一鸣语晨添池添昊雨泽雅晗雅涵清妍诗悦嘉乐晨涵天赫玥傲佳昊天昊萌萌若萌&quot;</span>;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">parseInt</span>(familyNames.length * <span class="hljs-built_in">Math</span>.random());<br>    <span class="hljs-keyword">var</span> familyName = familyNames.substr(i,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">var</span> len=givenNames.length;<br>    <span class="hljs-keyword">var</span> j = <span class="hljs-built_in">parseInt</span>(len * <span class="hljs-built_in">Math</span>.random()) ;<br>    <span class="hljs-keyword">var</span> k = <span class="hljs-built_in">parseInt</span>(len * <span class="hljs-built_in">Math</span>.random()) ;<br>    <span class="hljs-keyword">var</span> givenName = givenNames.substr(j,<span class="hljs-number">1</span>)+givenNames.substr(k,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">var</span> name = familyName + givenName;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getName());      <span class="hljs-comment">//在控制台打印输出</span><br>pm.globals.set(<span class="hljs-string">&quot;random_name&quot;</span>, getName())    <span class="hljs-comment">//设置随机姓名设置为全局变量</span><br></code></pre></td></tr></table></figure><p>（3）随机生成电话号码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMoble</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> prefixArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-string">&quot;130&quot;</span>, <span class="hljs-string">&quot;131&quot;</span>, <span class="hljs-string">&quot;132&quot;</span>, <span class="hljs-string">&quot;133&quot;</span>, <span class="hljs-string">&quot;135&quot;</span>, <span class="hljs-string">&quot;137&quot;</span>, <span class="hljs-string">&quot;138&quot;</span>, <span class="hljs-string">&quot;170&quot;</span>, <span class="hljs-string">&quot;187&quot;</span>, <span class="hljs-string">&quot;177&quot;</span>, <span class="hljs-string">&quot;189&quot;</span>);<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-built_in">parseInt</span>(<span class="hljs-number">10</span> * <span class="hljs-built_in">Math</span>.random());<br>    <span class="hljs-keyword">var</span> prefix = prefixArray[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; j++) &#123;<br>        prefix = prefix + <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> prefix;<br>&#125;<br><span class="hljs-built_in">console</span>.log(getMoble());     <span class="hljs-comment">//在控制台打印输出</span><br>pm.globals.set(<span class="hljs-string">&quot;random_mobile_phone&quot;</span>, getMoble());    <span class="hljs-comment">//设置随机电话号码设置为全局变量</span><br></code></pre></td></tr></table></figure><p>（4）随机生成身份证号码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata">function getId_no()&#123;<br>    <span class="hljs-keyword">var</span> coefficientArray = [ <span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>];<br>    <span class="hljs-keyword">var</span> lastNumberArray = [ <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>];<br>    <span class="hljs-keyword">var</span> address = <span class="hljs-string">&quot;610523&quot;</span>;<br>    <span class="hljs-keyword">var</span> birthday = <span class="hljs-string">&quot;19990101&quot;</span>;  <br>    <span class="hljs-keyword">var</span> s = Math.<span class="hljs-built_in">floor</span>(Math.random()*10).<span class="hljs-keyword">toString</span>() + Math.<span class="hljs-built_in">floor</span>(Math.random()*10).<span class="hljs-keyword">toString</span>() + Math.<span class="hljs-built_in">floor</span>(Math.random()*10).<span class="hljs-keyword">toString</span>();<br>    <span class="hljs-keyword">var</span> array = (address + birthday + s).<span class="hljs-keyword">split</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-keyword">total</span> = 0;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> array)&#123;<br>    <span class="hljs-keyword">total</span> = <span class="hljs-keyword">total</span> + parseInt(array[i])*parseInt(coefficientArray[i]);<br>    &#125;<br>    <span class="hljs-keyword">var</span> lastNumber = lastNumberArray[parseInt(<span class="hljs-keyword">total</span>%11)];<br>    <span class="hljs-keyword">var</span> id_no_String = address + birthday + s + lastNumber;<br>    <span class="hljs-keyword">return</span> id_no_String;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(getId_no());     <span class="hljs-comment">//在控制台打印输出</span><br>pm.globals.<span class="hljs-keyword">set</span>(<span class="hljs-string">&quot;random_id_no&quot;</span>,getId_no());      <span class="hljs-comment">//设置随机身份证号码设置为全局变量</span><br></code></pre></td></tr></table></figure><p>（5）随机获取一个0-9999的随机数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    <span class="hljs-function">function <span class="hljs-title">getRandomInt</span><span class="hljs-params">(min, max)</span> </span>&#123;<br>        min = Math.<span class="hljs-built_in">ceil</span>(min);<br>        max = Math.<span class="hljs-built_in">floor</span>(max);<br>        <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (max - min)) + min;<br>        &#125;<br>var myval = <span class="hljs-built_in">getRandomInt</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10000</span>);<br><br>console.<span class="hljs-built_in">log</span>(myval);     <span class="hljs-comment">//在控制台打印输出</span><br>pm.globals.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;random_num&quot;</span>,<span class="hljs-built_in">getRandomInt</span>());   <br></code></pre></td></tr></table></figure><h4 id="4、将postman的脚本转化为python代码在pycharm中运行"><a href="#4、将postman的脚本转化为python代码在pycharm中运行" class="headerlink" title="4、将postman的脚本转化为python代码在pycharm中运行"></a>4、将postman的脚本转化为python代码在pycharm中运行</h4><p>选择一个接口，点击右边的code  然后选择将其转化为python的requests，copy到pycharm去粘贴（注意在pycharm内添加requests包，最好使用python2.7，使用python3+可能会报错）</p><p><img src="/postman/Image2.png" alt="示例图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>postman, 工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/06/hello-world/"/>
    <url>/2021/12/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
